{"version":3,"sources":["components/search-box/searchbox.component.jsx","components/modal/modal.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBoxComponent","event","this","props","onChange","target","value","Paper","component","className","InputBase","placeholder","inputProps","_onChange","IconButton","type","aria-label","Component","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","createStyles","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","ModalComponent","classes","React","useState","modalStyle","body","style","id","command","name","description","Modal","open","onClose","e","aria-labelledby","aria-describedby","CardComponent","state","openModal","options","map","option","i","key","setState","toUpperCase","synopsis","length","_getOptionsContainer","details","_onModalClose","Button","variant","color","onClick","_onDetailsButtonClick","CardList","commands","App","searchKey","fetch","then","response","json","catch","error","console","log","filteredCommands","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5d13e195.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport './search-box.style.css';\n\nclass SearchBoxComponent extends Component {\n    _onChange(event) {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <Paper component=\"form\" className=\"root\">\n                <InputBase\n                    className=\"input\"\n                    placeholder=\"Search Command Here\"\n                    inputProps={{\"aria-label\": \"Search Command Here\"}}\n                    onChange={event => this._onChange(event)}\n                />\n                <IconButton\n                    type=\"submit\"\n                    className=\"icon-button\"\n                    aria-label=\"search\"\n                >\n                    <SearchIcon/>\n                </IconButton>\n            </Paper>\n        );\n    }\n}\n\nSearchBoxComponent.propTypes = {\n onChange: PropTypes.func.isRequired\n}\n\nexport default SearchBoxComponent;","/*\nimport React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from '@material-ui/core/Modal';\n\nclass ModalComponent extends Component {\n    _getModalStyle() {\n        const top = 50 + this._rand();\n        const left = 50 + this._rand();\n\n        return {\n            top: `${top}%`,\n            left: `${left}%`,\n            transform: `translate(-${top}%, -${left}%)`,\n        };\n    }\n\n    _rand() {\n        return Math.round(Math.random() * 20) - 10;\n    }\n\n    _getBody() {\n        return (\n            <div style={this._getModalStyle()} className=\"modal-container\">\n                <h2 id=\"simple-modal-title\">Text in a modal</h2>\n                <p id=\"simple-modal-description\">\n                    Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n                </p>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal open={this.props.open} onClose={e => this.props.onClose(e)}>\n                {this._getBody()}\n            </Modal>\n        );\n    }\n}\n\nModalComponent.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n}\n\nexport default ModalComponent;*/\nimport React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            position: 'absolute',\n            width: 400,\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n        },\n    }),\n);\n\nexport default function ModalComponent(props) {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n\n    const body = (\n        <div style={modalStyle} className={classes.paper}>\n            <h2 id=\"simple-modal-title\">{props.command.name}</h2>\n            <p id=\"simple-modal-description\">\n                {props.command.description}\n            </p>\n        </div>\n    );\n\n    return (\n        <div>\n            <Modal\n                open={props.open}\n                onClose={e => props.onClose(e)}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n        </div>\n    );\n}","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport ModalComponent from \"../modal/modal.component\";\nimport Button from \"@material-ui/core/Button\";\n\n// Import styles\nimport './card.style.css';\n\nclass CardComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            openModal: false\n        }\n    }\n\n    _getOptionsContainer(){\n        return (\n            <ul className=\"options\">\n                {this.props.command.options.map((option, i) => (\n                    <li key={i} className=\"option\">{option}</li>\n                ))}\n            </ul>\n        );\n    }\n\n    _onModalClose(e) {\n        this.setState({openModal: false});\n    }\n\n    _onDetailsButtonClick() {\n        this.setState({openModal: true});\n    }\n\n    render() {\n        return (\n            <div className='card-container'>\n                <h2 className=\"name\"> {this.props.command.name.toUpperCase()} </h2>\n                <p className=\"synopsis\"> {this.props.command.synopsis} </p>\n                {this.props.command.options.length > 0 &&\n                    this._getOptionsContainer()\n                }\n                <p className=\"details\"> {this.props.command.details} </p>\n                <ModalComponent command={this.props.command} open={this.state.openModal} onClose={e => this._onModalClose(e)} />\n                <Button variant=\"outlined\" color=\"primary\" onClick={e => this._onDetailsButtonClick()}>\n                    Details\n                </Button>\n            </div>\n        );\n    }\n}\n\nCardComponent.propTypes = {\n    command: PropTypes.object.isRequired\n}\n\nexport default CardComponent;\n","import React from \"react\";\nimport CardComponent from \"../card/card.component\";\n\n// Import styles\nimport './card-list.style.css';\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n        {props.commands.map(command => (\n            <CardComponent key={command.id} command={command} />\n        ))}\n    </div>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBoxComponent from \"./components/search-box/searchbox.component\";\nimport {CardList} from \"./components/card-list/card-list.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            commands: [],\n            searchKey: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('/tlcl/data/commands.json')\n            .then(response => response.json())\n            .then(commands => {\n                this.setState({commands: commands})\n            })\n            .catch(error => console.log(error));\n\n    }\n\n    render() {\n        const { commands, searchKey } = this.state;\n        const filteredCommands = commands.filter(command =>\n            command.name.toLowerCase().includes(searchKey.toLowerCase())\n        );\n\n        return (\n            <div className=\"App\">\n                <h1>The Linux Command Line</h1>\n                <div className=\"search-box\">\n                    <SearchBoxComponent onChange={searchKey => this.setState({searchKey: searchKey})} />\n                </div>\n                <div>\n                    <CardList commands={filteredCommands}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}