{"version":3,"sources":["components/search-box/searchbox.component.jsx","components/modal/modal.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBoxComponent","event","this","props","onChange","target","value","Paper","component","className","InputBase","placeholder","inputProps","_onChange","IconButton","type","aria-label","Component","ModalComponent","command","options","map","option","i","key","name","toUpperCase","onClick","e","onClose","aria-hidden","synopsis","length","_getOptionsContainer","details","Modal","open","_getBody","CardComponent","state","openModal","setState","_onModalClose","Button","variant","color","_onDetailsButtonClick","CardList","commands","id","App","searchKey","fetch","then","response","json","catch","error","console","log","filteredCommands","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.014e48e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport './search-box.style.css';\n\nclass SearchBoxComponent extends Component {\n    _onChange(event) {\n        this.props.onChange(event.target.value);\n    }\n\n    render() {\n        return (\n            <Paper component=\"form\" className=\"root\">\n                <InputBase\n                    className=\"input\"\n                    placeholder=\"Search Command Here\"\n                    inputProps={{\"aria-label\": \"Search Command Here\"}}\n                    onChange={event => this._onChange(event)}\n                />\n                <IconButton\n                    type=\"submit\"\n                    className=\"icon-button\"\n                    aria-label=\"search\"\n                >\n                    <SearchIcon/>\n                </IconButton>\n            </Paper>\n        );\n    }\n}\n\nSearchBoxComponent.propTypes = {\n onChange: PropTypes.func.isRequired\n}\n\nexport default SearchBoxComponent;","import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport Modal from '@material-ui/core/Modal';\n\n// Import style\nimport './modal.style.css';\n\nclass ModalComponent extends Component {\n    _getOptionsContainer(){\n        return (\n            <ul className=\"options\">\n                {this.props.command.options.map((option, i) => (\n                    <li key={i} className=\"option\">{option}</li>\n                ))}\n            </ul>\n        );\n    }\n\n    _getBody() {\n        const command = this.props.command;\n\n        return (\n            <div className=\"modal-container\">\n                <div className=\"card ad-card-medium\">\n                    <div className=\"card-header\">\n                        <h2>{command.name.toUpperCase()}\n                        <button type=\"button\" className=\"close\" onClick={e => this.props.onClose(e)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                        </h2>\n                    </div>\n                    <div className=\"card-body card-padding\">\n                        <h4><i className=\"fa fa-info-circle\"></i>&nbsp;{command.synopsis}</h4>\n                        {this.props.command.options.length > 0 &&\n                            this._getOptionsContainer()\n                        }\n                        <p className=\"ad-text-with-icon text-dark\">\n                            <span>{command.details}</span>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal open={this.props.open} onClose={e => this.props.onClose(e)}>\n                {this._getBody()}\n            </Modal>\n        );\n    }\n}\n\nModalComponent.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n}\n\nexport default ModalComponent;","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport ModalComponent from \"../modal/modal.component\";\nimport Button from \"@material-ui/core/Button\";\n\n// Import styles\nimport './card.style.css';\n\nclass CardComponent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            openModal: false\n        }\n    }\n\n    _onModalClose(e) {\n        this.setState({openModal: false});\n    }\n\n    _onDetailsButtonClick() {\n        this.setState({openModal: true});\n    }\n\n    render() {\n        return (\n            <div className=\"col-xl-3 col-lg-4 col-md-6 col-sm-12\">\n                <div className='card-container'>\n                    <h2 className=\"name\"> {this.props.command.name.toUpperCase()} </h2>\n                    <p className=\"synopsis\"> {this.props.command.synopsis} </p>\n                    <p className=\"details\"> {this.props.command.details} </p>\n                    <ModalComponent command={this.props.command} open={this.state.openModal} onClose={e => this._onModalClose(e)} />\n                    <Button variant=\"outlined\" color=\"primary\" onClick={e => this._onDetailsButtonClick()}>\n                        Details\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nCardComponent.propTypes = {\n    command: PropTypes.object.isRequired\n}\n\nexport default CardComponent;\n","import React from \"react\";\nimport CardComponent from \"../card/card.component\";\n\n// Import styles\nimport './card-list.style.css';\n\nexport const CardList = props => (\n    <div className=\"card-list\">\n        <div className=\"row\">\n            {props.commands.map(command => (\n                <CardComponent key={command.id} command={command} />\n            ))}\n        </div>\n    </div>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBoxComponent from \"./components/search-box/searchbox.component\";\nimport {CardList} from \"./components/card-list/card-list.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            commands: [],\n            searchKey: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('/tlcl/data/commands.json')\n            .then(response => response.json())\n            .then(commands => {\n                this.setState({commands: commands})\n            })\n            .catch(error => console.log(error));\n\n    }\n\n    render() {\n        const { commands, searchKey } = this.state;\n        const filteredCommands = commands.filter(command =>\n            command.name.toLowerCase().includes(searchKey.toLowerCase())\n        );\n\n        return (\n            <div className=\"App\">\n                <h1>The Linux Command Line</h1>\n                <div className=\"search-box\">\n                    <SearchBoxComponent onChange={searchKey => this.setState({searchKey: searchKey})} />\n                </div>\n                <div>\n                    <CardList commands={filteredCommands}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}